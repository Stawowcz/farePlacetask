import { HomePage } from '../pages/HomePage';
import { generateRandomDate, formatDateForDisplay, generateRandomNumber2to6, generateRandomNumber0to3, generateRandomCity } from '../../support/helper';
import { nameFiltersLoc, numberFiltersLoc } from "../../fixtures/filtersLocators.json";

describe('Search and filter', () => {
  const homePage = new HomePage();
  let testData: Record<string, any>

  before(() => {
    cy.fixture('filtersData.json').then((data) => {
      testData = data;
    });
  });

  beforeEach(() => {
    cy.visit('/');
    homePage.acceptCookies();
  });

  const numberOfIterations = 2; // if you increase this then more test will be ran, 

  // cities in this test are taken randomly from the filtersData.json fixtures,
  // data like cities and counter's numbers
  // used for increasing and decreasing adults are generated by the functions from helper.js file
  Array.from({ length: numberOfIterations }).forEach((_, index) => {
    it(`Should choose random city from list and apply filters - Iteration ${index + 1}`, () => {
      const { startDate, endDate, startDateUpdated, endDateUpdated, startDateDay, endDateDay, startDateDayUpdated, endDateDayUpdated } = generateRandomDate();
      const formattedStartDate = formatDateForDisplay(startDate);
      const formattedEndDate = formatDateForDisplay(endDate);
      const formattedStartDateUpdated = formatDateForDisplay(startDateUpdated);
      const formattedEndDateUpdated = formatDateForDisplay(endDateUpdated);

      // Use the cities list from the fixture
      const randomCity = generateRandomCity(testData.cities);
      const randomCityUpdated = generateRandomCity(testData.cities);

      const randomAdult = generateRandomNumber2to6();
      const randomAdultUpdated = generateRandomNumber0to3();
      const numberOfNights = endDateDay - startDateDay;
      const numberOfAdults = randomAdult + 2;
      const numberOfNightsUpdated = endDateDayUpdated - startDateDayUpdated;
      const numberOfAdultsUpdated = randomAdult + 2 - randomAdultUpdated;
      const expectedOccupacyInEveryHotelText = new RegExp(`^${numberOfNights} night[s]?, ${numberOfAdults} adult[s]?$`);
      const expectedOccupacyTextInEveryHotelUpdated = new RegExp(`^${numberOfNightsUpdated} night[s]?, ${numberOfAdultsUpdated} adult[s]?$`);
      const expectedOccupacyText = new RegExp(`^${randomAdult + 2} adult[s]? 路 0 children 路 1 room[s]?$`);
      const expectedOccupacyUpdatedText = new RegExp(`^${randomAdult + 2 - randomAdultUpdated} adult[s]? 路 0 children 路 1 room[s]?$`);

      // Search and set filters
      homePage.setCity(randomCity);
      homePage.openCalendar();
      homePage.clickDate(startDate);
      homePage.clickDate(endDate);
      homePage.expandOccupancyFilter();
      homePage.increaseAdult(randomAdult);
      homePage.submitOccupancy();
      homePage.submitSearch();

      // Assertion of the first search
      homePage.assertCityValue(randomCity);
      homePage.assertDateValue(formattedStartDate, homePage.calendarFieldLoc);
      homePage.assertDateValue(formattedEndDate, homePage.assertFormattedEndDateLoc);
      homePage.assertOccupancyFilters(expectedOccupacyText, homePage.occupancyFilterLoc);
      homePage.assertPageTitle(randomCity);
      homePage.assertOccupancyFilters(expectedOccupacyInEveryHotelText, homePage.assertOccupancyInEveryHotelLoc);

      // Set the updated city and perform actions
      homePage.clearCity();
      homePage.setCity(randomCityUpdated);
      homePage.openCalendar();
      homePage.clickDate(startDateUpdated);
      homePage.clickDate(endDateUpdated);
      homePage.expandOccupancyFilter();
      homePage.decreaseAdult(randomAdultUpdated);
      homePage.submitOccupancy();
      homePage.submitSearch();

      // Assertions for the updated search
      homePage.assertCityValue(randomCityUpdated);
      homePage.assertDateValue(formattedStartDateUpdated, homePage.calendarFieldLoc);
      homePage.assertDateValue(formattedEndDateUpdated, homePage.assertFormattedEndDateLoc);
      homePage.assertOccupancyFilters(expectedOccupacyUpdatedText, homePage.occupancyFilterLoc);
      homePage.assertPageTitle(randomCityUpdated);
      homePage.assertOccupancyFilters(expectedOccupacyTextInEveryHotelUpdated, homePage.assertOccupancyInEveryHotelLoc);
    });
  });

  //side filters are applied one after another and after each applying, header title is asserted
  //4 iterations in 1 test based on locators from filtersLocators.json
  it('Should check the application of side filters 1 after 1', () => {
    const { startDate, endDate } = generateRandomDate();
    const randomCity = generateRandomCity(testData.cities);
    const randomAdult = generateRandomNumber0to3();

    // Search and set filters
    homePage.setCity(randomCity);
    homePage.openCalendar();
    homePage.clickDate(startDate);
    homePage.clickDate(endDate);
    homePage.expandOccupancyFilter();
    homePage.increaseAdult(randomAdult);
    homePage.submitOccupancy();
    homePage.submitSearch();

    nameFiltersLoc.forEach((nameFiltersLoc, index:number) => {
      // Assertion's of element checked and if title header changed after filter applying, for 4 different filters one after another
      homePage.checkElement(nameFiltersLoc);
      homePage.assertElementChecked(nameFiltersLoc);
      homePage.assertFilterApplication(numberFiltersLoc[index], randomCity);
    });
  });

  //side filter is applied in each test and afterwards assertion of header title is done
  //4 iterations: 1 in each test based on locators from filtersLocators.json
  nameFiltersLoc.forEach((nameFiltersLoc, index:number) => {
    it(`Should apply and assert single side filter - Iteration ${index + 1}`, function() {
      const { startDate, endDate } = generateRandomDate();
      const randomCity = generateRandomCity(testData.cities);
      const randomAdult = generateRandomNumber0to3();

      // Search and set filters
      homePage.setCity(randomCity);
      homePage.openCalendar();
      homePage.clickDate(startDate);
      homePage.clickDate(endDate);
      homePage.expandOccupancyFilter();
      homePage.increaseAdult(randomAdult);
      homePage.submitOccupancy();
      homePage.submitSearch();
      homePage.checkElement(nameFiltersLoc);

      // Assertion's of element checked and if title header changed after filter applying
      homePage.assertElementChecked(nameFiltersLoc);
      homePage.assertFilterApplication(numberFiltersLoc[index], randomCity);
    });
  });
});
